import type { PageServerLoad, Actions } from './$types';
import { regions } from '$lib/data/regions';
import { fail, redirect } from '@sveltejs/kit';

export const load: PageServerLoad = async ({ params, locals: { safeGetSession, supabase } }) => {
  const id = params.id;

  let section: any = null;
  let regionName = '';
  let town = '';

  // Find the section in the regions data
  for (const region of regions) {
    const sec = region.sections?.[id];
    if (sec) {
      section = sec;
      regionName = region.name;
      town = sec.town;
      break;
    }
  }

  if (!section) {
    throw new Error('Section not found');
  }

  // Get session for authentication state
  const { session, user } = await safeGetSession();
  console.log('üîç Fetching violations for section_id:', id);

  // Fetch existing violation reports for this section (available to everyone)
  let existingReports: any[] = [];
  const { data: reports, error } = await supabase
    .from('violations')
    .select(`
      *
    `)
    .eq('section_id', id)
    .order('created_at', { ascending: false });

    
    console.log('üìä Database query result:', { data: reports, error });
console.log('üìà Number of reports found:', reports?.length || 0);



  if (!error && reports) {
    existingReports = reports;
  } else if (error) {
    console.error('Error fetching violations:', error);
    // If there's an RLS error, we'll still return empty array
    existingReports = [];
  }
console.log('üì§ Returning existingReports:', existingReports);
  return { 
    section, 
    regionName, 
    town, 
    id,
    session,
    user,
    existingReports
  };
  

};

export const actions: Actions = {
  submitReport: async ({ request, locals: { safeGetSession, supabase }, params }) => {
    const { session, user } = await safeGetSession();
    

    // Check if user is authenticated
    if (!session || !user) {
      return fail(401, { error: '–¢—Ä—è–±–≤–∞ –¥–∞ —Å—Ç–µ –≤–ª–µ–∑–ª–∏ –≤ –ø—Ä–æ—Ñ–∏–ª–∞ —Å–∏ –∑–∞ –¥–∞ –¥–æ–∫–ª–∞–¥–≤–∞—Ç–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è' });
    }

    const formData = await request.formData();
    const sectionId = params.id;
    
    // Extract form data
    const regionName = formData.get('regionName') as string;
    const town = formData.get('town') as string;
    const sectionAddress = formData.get('sectionAddress') as string;
    const otherViolation = formData.get('otherViolation') as string || '';

    // Extract selected violations from checkboxes
    const selectedViolations: string[] = [];
    const standardViolations = [
      '–õ–∏–ø—Å–≤–∞ –≤–∏–¥–µ–æ–∑–∞–ø–∏—Å –Ω–∞ –ø—Ä–µ–±—Ä–æ—è–≤–∞–Ω–µ—Ç–æ',
      '–í–∏–¥–µ–æ–∑–∞–ø–∏—Å –µ –∫—Ä–∞—Ç—ä–∫ (–ø–æ–¥ 60 –º–∏–Ω—É—Ç–∏) –∏ –Ω–µ –æ—Ç—Ä–∞–∑—è–≤–∞ —Ü–µ–ª–∏—è –ø—Ä–æ—Ü–µ—Å –ø–æ –ø—Ä–µ–±—Ä–æ—è–≤–∞–Ω–µ—Ç–æ',
      '–ö–∞–º–µ—Ä–∞—Ç–∞ –Ω—è–º–∞ —è—Å–Ω–∞ –≤–∏–¥–∏–º–æ—Å—Ç –∫—ä–º –º–∞—Å–∞—Ç–∞ —Å –±—é–ª–µ—Ç–∏–Ω–∏—Ç–µ –∏–ª–∏ –∏–º–∞ —Ö–æ—Ä–∞ –ø—Ä–µ–¥ –Ω–µ—è',
      '–í–∏–∂–¥–∞ —Å–µ, —á–µ —á–∞—Å—Ç –æ—Ç –±—é–ª–µ—Ç–∏–Ω–∏ –∏–∑–ª–∏–∑–∞—Ç –∏–∑–≤—ä–Ω –æ–±—Å–µ–≥–∞ –Ω–∞ –∫–∞–º–µ—Ä–∞—Ç–∞ (–∏ –Ω–µ —Å–µ –∑–Ω–∞–µ –∫–∞–∫–≤–æ —Å–µ —Å–ª—É—á–≤–∞ —Å —Ç—è—Ö)',
      '–•–∞—Ä—Ç–∏–µ–Ω–∏—Ç–µ –±—é–ª–µ—Ç–∏–Ω–∏ –Ω–µ —Å–µ –≤–∞–¥—è—Ç –µ–¥–Ω–∞ –ø–æ –µ–¥–Ω–∞ –æ—Ç —É—Ä–Ω–∞—Ç–∞',
      '–ú–∞—à–∏–Ω–Ω–∏—Ç–µ –±—é–ª–µ—Ç–∏–Ω–∏ –Ω–µ —Å–µ –≤–∞–¥—è—Ç –µ–¥–Ω–∞ –ø–æ –µ–¥–Ω–∞ –æ—Ç —É—Ä–Ω–∞—Ç–∞',
      '–ò–º–∞ –ø–æ–≤–µ—á–µ –æ—Ç –µ–¥–∏–Ω —Ö–∏–º–∏–∫–∞–ª –Ω–∞ –º–∞—Å–∞—Ç–∞ —Å –±—é–ª–µ—Ç–∏–Ω–∏—Ç–µ –∏/–∏–ª–∏ –≤ —Ä—ä—Ü–µ—Ç–µ –Ω–∞ —Ö–æ—Ä–∞—Ç–∞ –æ–∫–æ–ª–æ –º–∞—Å–∞—Ç–∞',
      '–ë—é–ª–µ—Ç–∏–Ω–∏—Ç–µ –Ω–µ —Å–µ –±—Ä–æ—è—Ç –æ—Ç –µ–¥–∏–Ω —á–æ–≤–µ–∫',
      '–ü—Ä–∏ –ø—Ä–µ–±—Ä–æ—è–≤–∞–Ω–µ—Ç–æ –∏–º, –±—é–ª–µ—Ç–∏–Ω–∏—Ç–µ –Ω–µ —Å–µ –ø–æ–∫–∞–∑–≤–∞—Ç –ø—Ä–µ–¥ –∫–∞–º–µ—Ä–∞—Ç–∞',
      '–ê–∫–æ —Å–µ –ø–æ–∫–∞–∑–≤–∞—Ç –ø—Ä–µ–¥ –∫–∞–º–µ—Ä–∞—Ç–∞, –±—é–ª–µ—Ç–∏–Ω–∏—Ç–µ –Ω–µ —Å–∞ —è—Å–Ω–æ –≤–∏–¥–∏–º–∏',
      '–ü–∏—à–µ —Å–µ –ø–æ –±—é–ª–µ—Ç–∏–Ω–∏—Ç–µ –ø–æ –≤—Ä–µ–º–µ –Ω–∞ –±—Ä–æ–µ–Ω–µ—Ç–æ',
      '–ù–ï —Å–µ –æ–±—è—Å–Ω—è–≤–∞ –∑–∞—â–æ –¥–∞–¥–µ–Ω–∞ –±—é–ª–µ—Ç–∏–Ω–∞ –µ –Ω–µ–≤–∞–ª–∏–¥–Ω–∞',
      '–¶–∏—Ç–∏—Ä–∞—Ç —Å–µ –±—Ä–æ–π –≥–ª–∞—Å–æ–≤–µ –∑–∞ –¥–∞–¥–µ–Ω–∞ –ø–∞—Ä—Ç–∏—è, –∫–æ–∏—Ç–æ —Å–µ —Ä–∞–∑–º–∏–Ω–∞–≤–∞—Ç —Å –æ—Ç—Ä–∞–∑–µ–Ω–∏—Ç–µ –≤ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞',
      '–í–∏–∂–¥–∞ —Å–µ —É–Ω–∏—â–æ–∂–∞–≤–∞–Ω–µ –Ω–∞ –±—é–ª–µ—Ç–∏–Ω–∏ –∏–ª–∏ —á–∞—Å—Ç–∏ –æ—Ç —Ç—è—Ö (–æ—Ç—Ä—è–∑—ä—Ü–∏)',
      '–ù–∞ –∑–∞–ø–∏—Å–∞ –Ω–µ —Å–µ –≤–∏–∂–¥–∞ —á–ª–µ–Ω–æ–≤–µ—Ç–µ –Ω–∞ –∫–æ–º–∏—Å–∏—è—Ç–∞ –¥–∞ –ø–æ–¥–ø–∏—Å–≤–∞—Ç –ø—Ä–æ—Ç–æ–∫–æ–ª–∞',
      '–í–ª–∏–∑–∞—Ç –∏–ª–∏ –∏–∑–ª–∏–∑–∞—Ç —Ö–æ—Ä–∞ –æ—Ç —Å–µ–∫—Ü–∏—è—Ç–∞ –ø–æ –≤—Ä–µ–º–µ –Ω–∞ –±—Ä–æ–µ–Ω–µ—Ç–æ'
    ];

    // Check which violations were selected
    standardViolations.forEach((violation, index) => {
      if (formData.get(`violation-${index}`) === 'on') {
        selectedViolations.push(violation);
      }
    });

    // Validate that at least one violation is selected or other violation is provided
    if (selectedViolations.length === 0 && !otherViolation.trim()) {
      return fail(400, { 
        error: '–ú–æ–ª—è –∏–∑–±–µ—Ä–µ—Ç–µ –ø–æ–Ω–µ –µ–¥–Ω–æ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –∏–ª–∏ –æ–ø–∏—à–µ—Ç–µ –¥—Ä—É–≥–æ –Ω–∞—Ä—É—à–µ–Ω–∏–µ',
        formData: Object.fromEntries(formData)
      });
    }

    try {
      // Insert the violation report into the database
      const { error } = await supabase
        .from('violations')
        .insert({
          section_id: sectionId,
          region_name: regionName,
          town: town,
          section_address: sectionAddress,
          selected_violations: selectedViolations,
          other_violation: otherViolation.trim(),
          reported_by: user.id,
          reporter_email: user.email,
          created_at: new Date().toISOString()
        });

      if (error) {
        console.error('Database error:', error);
        return fail(500, { 
          error: '–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–≤–∞–Ω–µ –≤ –±–∞–∑–∞—Ç–∞ –¥–∞–Ω–Ω–∏. –ú–æ–ª—è –æ–ø–∏—Ç–∞–π—Ç–µ –æ—Ç–Ω–æ–≤–æ.',
          formData: Object.fromEntries(formData)
        });
      }

      return { success: true, message: '–î–æ–∫–ª–∞–¥—ä—Ç –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –±–µ—à–µ –∏–∑–ø—Ä–∞—Ç–µ–Ω —É—Å–ø–µ—à–Ω–æ!' };

    } catch (err) {
      console.error('Unexpected error:', err);
      return fail(500, { 
        error: '–ù–µ–æ—á–∞–∫–≤–∞–Ω–∞ –≥—Ä–µ—à–∫–∞. –ú–æ–ª—è –æ–ø–∏—Ç–∞–π—Ç–µ –æ—Ç–Ω–æ–≤–æ.',
        formData: Object.fromEntries(formData)
      });
    }
  }
};
